type Asset {
  country: Country
  currencies: [Currency!]
  currency: Currency
  dailyChange: Money!

  """
  1.0 == 100%
  """
  dailyChangePercent: Float!
  description: String

  """
  Flux CSV with historic data
  """
  history(currency: String): AssetHistory
  id: ID!
  kind: AssetKindEnum!
  logoUrl: String
  marketValue(at: ISO8601DateTime): Money!
  name: String
  status: AssetStatusEnum!
  ticker: Ticker!
  updatedAt: ISO8601DateTime!
}

type AssetHistory {
  currency: Currency!
  timestamps: [Int!]!
  values: [Float!]!
}

enum AssetKindEnum {
  BONDS
  CASH
  CFD
  CRYPTO
  CURRENCY
  ETF
  STOCK
  UNKNOWN
}

enum AssetStatusEnum {
  ARCHIVED
  FAILED
  INITIALIZING
  READY
}

"""
Autogenerated input type of Buy
"""
input BuyInput {
  amount: Float!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  commission: MoneyArgument
  date: ISO8601Date!
  price: MoneyArgument
  ticker: ID!
}

"""
Autogenerated return type of Buy
"""
type BuyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  holding: Holding
}

type Category {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

type Country {
  flag: String!
  id: ID!
  name: String!
  region: String!
}

"""
Autogenerated input type of Create
"""
input CreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated return type of Create
"""
type CreatePayload {
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

type Currency {
  id: ID!
  isoCode: String!
  name: String!
  subunitToUnit: Int!
  symbol: String!
}

"""
Autogenerated input type of Destroy
"""
input DestroyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of Destroy
"""
type DestroyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean
}

type Holding {
  amount: Float!
  asset: Asset!
  closeCommission: Money
  closeDate: ISO8601Date!
  closePrice: Money!
  createdAt: ISO8601DateTime!
  dailyChange: Money!

  """
  1.0 == 100%
  """
  dailyChangePercent: Float!
  id: ID!
  marketValue(at: ISO8601DateTime): Money!
  netGain(at: ISO8601DateTime): Money!
  openCommission: Money
  openDate: ISO8601Date
  openPrice: Money
  openValue: Money!
  state: HoldingStateEnum!
  updatedAt: ISO8601DateTime!
}

enum HoldingStateEnum {
  ARCHIVED
  BUY
  SELL
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Money {
  amount: Float
  cents: Int!
  currency: Currency!
  exchange(at: ISO8601DateTime, currency: String): Money!
  formatted: String
}

scalar MoneyArgument

type Mutation {
  buy(
    """
    Parameters for Buy
    """
    input: BuyInput!
  ): BuyPayload
  createCategory(
    """
    Parameters for Create
    """
    input: CreateInput!
  ): CreatePayload
  destroyCategory(
    """
    Parameters for Destroy
    """
    input: DestroyInput!
  ): DestroyPayload

  """
  Start observing assets
  """
  observe(
    """
    Parameters for Observe
    """
    input: ObserveInput!
  ): ObservePayload
  sell(
    """
    Parameters for Sell
    """
    input: SellInput!
  ): SellPayload
  updateCategory(
    """
    Parameters for Update
    """
    input: UpdateInput!
  ): UpdatePayload
}

"""
Autogenerated input type of Observe
"""
input ObserveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  ticker: String!
}

"""
Autogenerated return type of Observe
"""
type ObservePayload {
  asset: Asset

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

type Query {
  asset(ticker: String!): Asset
  assets(observed: Boolean, status: AssetStatusEnum): [Asset!]!
  categories: [Category!]!
  defaultCurrency: Currency!
  holding(id: ID!): Holding
  holdings(state: HoldingStateEnum, ticker: ID): [Holding!]!
  search(ticker: String!): [SearchResult!]!
}

type SearchResult {
  country: String
  description: String
  ticker: Ticker!
  type: String
}

"""
Autogenerated input type of Sell
"""
input SellInput {
  amount: Float!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  closeCommission: MoneyArgument
  closeDate: ISO8601Date!
  closePrice: MoneyArgument
  id: ID!
}

"""
Autogenerated return type of Sell
"""
type SellPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  holdings: [Holding!]
}

type Ticker {
  exchange: String
  id: ID!
  symbol: String!
  url: String!
}

"""
Autogenerated input type of Update
"""
input UpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  name: String!
}

"""
Autogenerated return type of Update
"""
type UpdatePayload {
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}