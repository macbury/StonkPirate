export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  MoneyArgument: any;
};

export type Asset = {
  __typename?: 'Asset';
  country?: Maybe<Country>;
  currencies?: Maybe<Array<Currency>>;
  currency?: Maybe<Currency>;
  dailyChange: Money;
  /** 1.0 == 100% */
  dailyChangePercent: Scalars['Float'];
  description?: Maybe<Scalars['String']>;
  /** Flux CSV with historic data */
  history?: Maybe<AssetHistory>;
  id: Scalars['ID'];
  kind: AssetKindEnum;
  logoUrl?: Maybe<Scalars['String']>;
  marketValue: Money;
  name?: Maybe<Scalars['String']>;
  status: AssetStatusEnum;
  ticker: Ticker;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type AssetHistoryArgs = {
  currency?: Maybe<Scalars['String']>;
};


export type AssetMarketValueArgs = {
  at?: Maybe<Scalars['ISO8601DateTime']>;
};

export type AssetHistory = {
  __typename?: 'AssetHistory';
  currency: Currency;
  timestamps: Array<Scalars['Int']>;
  values: Array<Scalars['Float']>;
};

export enum AssetKindEnum {
  Bonds = 'BONDS',
  Cash = 'CASH',
  Cfd = 'CFD',
  Crypto = 'CRYPTO',
  Currency = 'CURRENCY',
  Etf = 'ETF',
  Stock = 'STOCK',
  Unknown = 'UNKNOWN'
}

export enum AssetStatusEnum {
  Archived = 'ARCHIVED',
  Failed = 'FAILED',
  Initializing = 'INITIALIZING',
  Ready = 'READY'
}

/** Autogenerated input type of Buy */
export type BuyInput = {
  amount: Scalars['Float'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  commission?: Maybe<Scalars['MoneyArgument']>;
  date: Scalars['ISO8601Date'];
  price?: Maybe<Scalars['MoneyArgument']>;
  ticker: Scalars['ID'];
};

/** Autogenerated return type of Buy */
export type BuyPayload = {
  __typename?: 'BuyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<Scalars['String']>;
  holding?: Maybe<Holding>;
};

export type Category = {
  __typename?: 'Category';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Country = {
  __typename?: 'Country';
  flag: Scalars['String'];
  id: Scalars['ID'];
  name: Scalars['String'];
  region: Scalars['String'];
};

/** Autogenerated input type of Create */
export type CreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  name: Scalars['String'];
};

/** Autogenerated return type of Create */
export type CreatePayload = {
  __typename?: 'CreatePayload';
  category?: Maybe<Category>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<Scalars['String']>;
};

export type Currency = {
  __typename?: 'Currency';
  id: Scalars['ID'];
  isoCode: Scalars['String'];
  name: Scalars['String'];
  subunitToUnit: Scalars['Int'];
  symbol: Scalars['String'];
};

/** Autogenerated input type of Destroy */
export type DestroyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of Destroy */
export type DestroyPayload = {
  __typename?: 'DestroyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
};

export type Holding = {
  __typename?: 'Holding';
  amount: Scalars['Float'];
  asset: Asset;
  closeCommission?: Maybe<Money>;
  closeDate: Scalars['ISO8601Date'];
  closePrice: Money;
  createdAt: Scalars['ISO8601DateTime'];
  dailyChange: Money;
  /** 1.0 == 100% */
  dailyChangePercent: Scalars['Float'];
  id: Scalars['ID'];
  marketValue: Money;
  netGain: Money;
  openCommission?: Maybe<Money>;
  openDate?: Maybe<Scalars['ISO8601Date']>;
  openPrice?: Maybe<Money>;
  openValue: Money;
  state: HoldingStateEnum;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type HoldingMarketValueArgs = {
  at?: Maybe<Scalars['ISO8601DateTime']>;
};


export type HoldingNetGainArgs = {
  at?: Maybe<Scalars['ISO8601DateTime']>;
};

export enum HoldingStateEnum {
  Archived = 'ARCHIVED',
  Buy = 'BUY',
  Sell = 'SELL'
}



export type Money = {
  __typename?: 'Money';
  amount?: Maybe<Scalars['Float']>;
  cents: Scalars['Int'];
  currency: Currency;
  exchange: Money;
  formatted?: Maybe<Scalars['String']>;
};


export type MoneyExchangeArgs = {
  at?: Maybe<Scalars['ISO8601DateTime']>;
  currency?: Maybe<Scalars['String']>;
};


export type Mutation = {
  __typename?: 'Mutation';
  buy?: Maybe<BuyPayload>;
  createCategory?: Maybe<CreatePayload>;
  destroyCategory?: Maybe<DestroyPayload>;
  /** Start observing assets */
  observe?: Maybe<ObservePayload>;
  sell?: Maybe<SellPayload>;
  updateCategory?: Maybe<UpdatePayload>;
};


export type MutationBuyArgs = {
  input: BuyInput;
};


export type MutationCreateCategoryArgs = {
  input: CreateInput;
};


export type MutationDestroyCategoryArgs = {
  input: DestroyInput;
};


export type MutationObserveArgs = {
  input: ObserveInput;
};


export type MutationSellArgs = {
  input: SellInput;
};


export type MutationUpdateCategoryArgs = {
  input: UpdateInput;
};

/** Autogenerated input type of Observe */
export type ObserveInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  ticker: Scalars['String'];
};

/** Autogenerated return type of Observe */
export type ObservePayload = {
  __typename?: 'ObservePayload';
  asset?: Maybe<Asset>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  asset?: Maybe<Asset>;
  assets: Array<Asset>;
  categories: Array<Category>;
  defaultCurrency: Currency;
  holding?: Maybe<Holding>;
  holdings: Array<Holding>;
  search: Array<SearchResult>;
};


export type QueryAssetArgs = {
  ticker: Scalars['String'];
};


export type QueryAssetsArgs = {
  observed?: Maybe<Scalars['Boolean']>;
  status?: Maybe<AssetStatusEnum>;
};


export type QueryHoldingArgs = {
  id: Scalars['ID'];
};


export type QueryHoldingsArgs = {
  state?: Maybe<HoldingStateEnum>;
  ticker?: Maybe<Scalars['ID']>;
};


export type QuerySearchArgs = {
  ticker: Scalars['String'];
};

export type SearchResult = {
  __typename?: 'SearchResult';
  country?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  ticker: Ticker;
  type?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of Sell */
export type SellInput = {
  amount: Scalars['Float'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  closeCommission?: Maybe<Scalars['MoneyArgument']>;
  closeDate: Scalars['ISO8601Date'];
  closePrice?: Maybe<Scalars['MoneyArgument']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of Sell */
export type SellPayload = {
  __typename?: 'SellPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<Scalars['String']>;
  holdings?: Maybe<Array<Holding>>;
};

export type Ticker = {
  __typename?: 'Ticker';
  exchange?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  symbol: Scalars['String'];
  url: Scalars['String'];
};

/** Autogenerated input type of Update */
export type UpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
};

/** Autogenerated return type of Update */
export type UpdatePayload = {
  __typename?: 'UpdatePayload';
  category?: Maybe<Category>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors: Array<Scalars['String']>;
};

export type ViewAssetFragment = (
  { __typename?: 'Asset' }
  & Pick<Asset, 'id' | 'kind' | 'name' | 'status' | 'updatedAt' | 'logoUrl'>
  & { ticker: (
    { __typename?: 'Ticker' }
    & Pick<Ticker, 'symbol' | 'url' | 'exchange' | 'id'>
  ), currency?: Maybe<(
    { __typename?: 'Currency' }
    & Pick<Currency, 'id'>
  )>, country?: Maybe<(
    { __typename?: 'Country' }
    & Pick<Country, 'flag' | 'name' | 'id'>
  )>, marketValue: (
    { __typename?: 'Money' }
    & Pick<Money, 'formatted' | 'amount'>
  ) }
);

export type ViewHoldingFragment = (
  { __typename?: 'Holding' }
  & Pick<Holding, 'id' | 'state' | 'amount'>
  & { asset: (
    { __typename?: 'Asset' }
    & ViewAssetFragment
  ) }
);

export type ObserveMutationVariables = Exact<{
  ticker: Scalars['String'];
}>;


export type ObserveMutation = (
  { __typename?: 'Mutation' }
  & { observe?: Maybe<(
    { __typename?: 'ObservePayload' }
    & { asset?: Maybe<(
      { __typename?: 'Asset' }
      & ViewAssetFragment
    )> }
  )> }
);

export type AllAssetsQueryVariables = Exact<{
  status: AssetStatusEnum;
}>;


export type AllAssetsQuery = (
  { __typename?: 'Query' }
  & { assets: Array<(
    { __typename?: 'Asset' }
    & Pick<Asset, 'dailyChangePercent'>
    & { dailyChange: (
      { __typename?: 'Money' }
      & Pick<Money, 'amount' | 'formatted'>
    ) }
    & ViewAssetFragment
  )> }
);

export type FindAssetQueryVariables = Exact<{
  tickerId: Scalars['String'];
}>;


export type FindAssetQuery = (
  { __typename?: 'Query' }
  & { asset?: Maybe<(
    { __typename?: 'Asset' }
    & Pick<Asset, 'description'>
    & { currencies?: Maybe<Array<(
      { __typename?: 'Currency' }
      & Pick<Currency, 'id' | 'isoCode' | 'symbol'>
    )>> }
    & ViewAssetFragment
  )> }
);
